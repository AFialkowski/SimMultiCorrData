library(BB)
citation("BB")
citation("nleqslv")
?D()
Sys.which(Sys.getenv("R_QPDF"))
Sys.setenv(R_QPDF = "C:\\Users\\Allison\\Downloads\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin\\qpdf.exe")
Sys.which(Sys.getenv("R_QPDF"))
library(BinNonNor)
?`BinNonNor-package`
Biserial.Corr.BN
?dnorm()
IntermediateONN
library(BinOrdNonNor)
IntermediateONN
Sys.getenv("R_QPDF")
Sys.setenv(R_QPDF = "C:\\Users\\Allison\\Downloads\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin\\qpdf.exe")
library(GenOrd)
library(SimMultiCorrData)
library(SimMultiCorrData)
update.packages(checkBuilt=TRUE, ask=FALSE)
Sys.which(Sys.getenv("R_QPDF"))
Sys.setenv(R_QPDF = "C:\\Users\\Allison\\Downloads\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin\\qpdf.exe")
install.packages(c("actuar", "backports", "bayesplot", "cluster", "corpcor", "CorrToolBox", "curl", "DBI", "dendextend", "Deriv", "devtools", "dplyr", "expint", "FactoMineR", "flexmix", "foreign", "formatR", "ggpubr", "ggsci", "glmnet", "goftest", "Hmisc", "htmltools", "installr", "irlba", "jsonlite", "knitr", "lattice", "lme4", "loo", "Matrix", "matrixStats", "mclust", "MCMCpack", "mixtools", "mvtnorm", "nleqslv", "pbkrtest", "plotly", "portes", "processx", "psych", "purrr", "qqman", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown", "rms", "rsconnect", "rstan", "rstanarm", "rstantools", "scatterplot3d", "segmented", "sfsmisc", "shiny", "sourcetools", "SparseM", "StanHeaders", "stringi", "survival", "tibble", "tidyr", "tseries", "VIM", "viridis", "XML", "zoo"))
library(devtools)
?check()
check(cleanup = FALSE,manual = TRUE,path = getwd())
library(SimMultiCorrData)
library("BinOrdNonNor")
?`BinOrdNonNor-package`
IntermediateONN
?check()
check(manual=TRUE,path=getwd())
?build_win()
system("R CMD Rd2pdf C:/Users/Allison/Documents/SimMultiCorrData")
check(manual=TRUE,path=getwd())
system("R CMD Rd2pdf C:/Users/Allison/Documents/SimMultiCorrData")
system("R CMD Rd2pdf C:/Users/Allison/Documents/SimMultiCorrData")
system("R CMD Rd2pdf C:/Users/Allison/Documents/SimMultiCorrData")
library(SimMultiCorrData)
system("R CMD Rd2pdf C:/Users/Allison/Documents/SimMultiCorrData")
IntermediateONN
build_win(version="R-devel")
?polyroot()
library(PoisBinOrdNonNor)
?`PoisBinOrdNonNor-package`
find.cor.mat.star
library(orddata)
citation("orddata")
?build_win()
library(SimMultiCorrData)
build_win(version="R-devel",args=c("--no-build-vignettes"))
?PoisBinOrdNonNor
build_win(version="R-devel")
system("R CMD Rd2pdf C:/Users/Allison/Documents/SimMultiCorrData")
library(ggplot2)
?ggplot2
?ggplot
library(devtools)
?Rd2pdf()
library(SimMultiCorrData)
system("R CMD Rd2pdf C:/Users/Allison/Documents/SimMultiCorrData")
library(SimMultiCorrData)
system("R CMD Rd2pdf C:/Users/Allison/Documents/SimMultiCorrData")
build_win(version="R-devel")
Sys.which(Sys.getenv("R_QPDF"))
Sys.setenv(R_QPDF = "C:\\Users\\Allison\\Downloads\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin\\qpdf.exe")
Sys.which(Sys.getenv("R_QPDF"))
library(SimMultiCorrData)
?fleish_Hessian()
library(devtools)
?build_win()
build_win(version="R-devel")
Sys.setenv(R_QPDF = "C:\\Users\\Allison\\Downloads\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin\\qpdf.exe")
install.packages(c("curl", "httr"))
library(SimMultiCorrData)
?fleish_Hessian()
library(devtools)
build_win(version="R-devel")
?build_win
build_win(version="R-release")
file.exists("~/.ssh/id_rsa.pub")
devtools::use_readme_rmd()
Sys.setenv(R_QPDF = "C:\\Users\\Allison\\Downloads\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin\\qpdf.exe")
file.exists("~/.ssh/id_rsa.pub")
Sys.setenv(R_QPDF = "C:\\Users\\Allison\\Downloads\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin\\qpdf.exe")
devtools::use_travis()
Sys.setenv(R_QPDF = "C:\\Users\\Allison\\Downloads\\qpdf-5.1.2-bin-mingw32\\qpdf-5.1.2\\bin\\qpdf.exe")
library(ggplot2)
citation("ggplot2")
library(MultiOrd)
?`MultiOrd-package`
91-73+1
library(nleqslv)
?nleqslv()
citation("stats")
library(SimMultiCorrData)
calc_lower_skurt("Fleishman",skews=0)
calc_lower_skurt("Fleishman",skews=0,Skurt=1.2)
Skurt=1.2
Skurt[1]
method = "Fleishman"
skews = 0; fifths = NULL; sixths = NULL
Skurt = 1.2; Six = NULL; xstart = NULL
seed = 104; n = 50
SkurtCorr1 <- NULL
error1 <- "Lower boundary could not be found.
Try more starting values (increase n) or a different seed.
Also check the cumulant values.\n"
error2 <- "Only invalid power method constants could be found.
Try a larger n, a different seed, or a kurtosis correction vector.
Also check the cumulant values.\n"
skews0 <- skews
skews <- abs(skews)
skews[1] == 0
gamma2 <- function(c3) 24 * ((sqrt(1 - 6 * c3^2) - 3 * c3) *
c3 + c3^2 * (12 + 48 *
(sqrt(1 - 6 * c3^2) -
3 * c3) * c3 +
225 * c3^2))
c3 <- suppressWarnings(optimize(gamma2,
interval = c(-1e06,
sqrt(1/6)))$minimum)
g2 <- gamma2(c3)
c1 <- sqrt(1 - 6 * c3^2) - 3 * c3
C <- matrix(1, nrow = 1, ncol = 6)
C[1, ] <- c(0, 0, c1, 0, c3, g2)
C <- data.frame(C, pdf_check(c(0, c1, 0, c3),
method)$valid.pdf)
colnames(C) <- c("skew", "c0", "c1", "c2", "c3", "skurtosis",
"valid.pdf")
constants2 <- C[C$valid.pdf == "TRUE", ]
length(Skurt) == 0
v <- 1
while (nrow(constants2) == 0) {
con_solution <-
suppressWarnings(find_constants(method = method,
skews = skews,
skurts =
min(C$skurtosis) +
Skurt[v],
fifths = NULL,
sixths = NULL,
Six = NULL,
cstart = NULL,
n = n,
seed = seed))
if (length(con_solution) != 1) {
if (con_solution$valid == "TRUE") {
constants2 <- matrix(con_solution$constants,
nrow = 1, ncol =
length(con_solution$constants))
}
}
v <- v + 1
if (v > length(Skurt)) break
}
v
method = method; skews = skews
skurts = min(C$skurtosis) + Skurt[v]
fifths = NULL; sixths = NULL; Six = NULL; cstart = NULL; n = n; seed = seed
skurts
error <- "No valid power method constants could be found for the specified
cumulants.  Try using a different seed or increasing n.\n"
skews == 0 & skurts == 0
if (length(cstart) == 0) {
set.seed(seed)
cstart1 <- runif(n, min = -2, max = 2)
cstart2 <- runif(n, min = -1, max = 1)
cstart3 <- runif(n, min = -0.5, max = 0.5)
cstart <- cbind(cstart1, cstart2, cstart3)
}
zeros <- multiStart(par = cstart, fn = fleish, gr = NULL,
action = "solve", method = c(2, 3, 1),
lower = -Inf, upper = Inf, project = NULL,
projectArgs = NULL, control = list(trace = FALSE),
quiet = TRUE, a = c(skews, skurts))
converged <- matrix(zeros$par[zeros$converged == "TRUE", ],
nrow = sum(zeros$converged == "TRUE"))
library(BB)
if (length(cstart) == 0) {
set.seed(seed)
cstart1 <- runif(n, min = -2, max = 2)
cstart2 <- runif(n, min = -1, max = 1)
cstart3 <- runif(n, min = -0.5, max = 0.5)
cstart <- cbind(cstart1, cstart2, cstart3)
}
zeros <- multiStart(par = cstart, fn = fleish, gr = NULL,
action = "solve", method = c(2, 3, 1),
lower = -Inf, upper = Inf, project = NULL,
projectArgs = NULL, control = list(trace = FALSE),
quiet = TRUE, a = c(skews, skurts))
converged <- matrix(zeros$par[zeros$converged == "TRUE", ],
nrow = sum(zeros$converged == "TRUE"))
converged
nrow(converged) == 0
constants <- converged
constants <- data.frame(cbind(-constants[, 2], constants),
rep("FALSE", nrow(constants)))
colnames(constants) <- c("c0", "c1", "c2", "c3", "valid")
constants$valid <- as.character(constants$valid)
i=1
power_norm_corr(as.numeric(constants[i, 1:4]),
method = method)
constants
if (power_norm_corr(as.numeric(constants[i, 1:4]),
method = method) < 0) {
constants[i, 2] <- -constants[i, 2]
constants[i, 4] <- -constants[i, 4]
}
constants
pdf_check(as.numeric(constants[i, 1:4]),
method = method)
check <- capture.output(pdf_check(as.numeric(constants[i, 1:4]),
method = method)$valid.pdf)
check
check[1]
check[2]
check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE"
skurts = min(C$skurtosis) + Skurt[v]
skurts
method = method; skews = skews
skurts = min(C$skurtosis) + Skurt[v]
fifths = NULL; sixths = NULL; Six = NULL; cstart = NULL; n = n; seed = seed
find_constants(method,skews,skurts,fifths,sixths,Six,cstart,n,seed)
if (length(cstart) == 0) {
set.seed(seed)
cstart1 <- runif(n, min = -2, max = 2)
cstart2 <- runif(n, min = -1, max = 1)
cstart3 <- runif(n, min = -0.5, max = 0.5)
cstart <- cbind(cstart1, cstart2, cstart3)
}
zeros <- multiStart(par = cstart, fn = fleish, gr = NULL,
action = "solve", method = c(2, 3, 1),
lower = -Inf, upper = Inf, project = NULL,
projectArgs = NULL, control = list(trace = FALSE),
quiet = TRUE, a = c(skews, skurts))
converged <- matrix(zeros$par[zeros$converged == "TRUE", ],
nrow = sum(zeros$converged == "TRUE"))
converged
constants <- converged
constants <- data.frame(cbind(-constants[, 2], constants),
rep("FALSE", nrow(constants)))
colnames(constants) <- c("c0", "c1", "c2", "c3", "valid")
constants$valid <- as.character(constants$valid)
constants
i=1
if (power_norm_corr(as.numeric(constants[i, 1:4]),
method = method) < 0) {
constants[i, 2] <- -constants[i, 2]
constants[i, 4] <- -constants[i, 4]
}
check <- capture.output(pdf_check(as.numeric(constants[i, 1:4]),
method = method)$valid.pdf)
if (check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE") {
constants$valid[i] <- "TRUE"
}
i=2
if (power_norm_corr(as.numeric(constants[i, 1:4]),
method = method) < 0) {
constants[i, 2] <- -constants[i, 2]
constants[i, 4] <- -constants[i, 4]
}
check <- capture.output(pdf_check(as.numeric(constants[i, 1:4]),
method = method)$valid.pdf)
if (check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE") {
constants$valid[i] <- "TRUE"
}
power_norm_corr(as.numeric(constants[i, 1:4]),
method = method)
pdf_check(as.numeric(constants[i, 1:4]),
method = method)
check <- capture.output(pdf_check(as.numeric(constants[i, 1:4]),
method = method)$valid.pdf)
check
if (check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE") {
constants$valid[i] <- "TRUE"
}
check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE"
(check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE") == TRUE
check[2]
!is.na(check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE")
if (!is.na(check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE")) {
constants$valid[i] <- "TRUE"
} else {
constants$valid[i] <- "FALSE"
}
i=1
if (power_norm_corr(as.numeric(constants[i, 1:4]),
method = method) < 0) {
constants[i, 2] <- -constants[i, 2]
constants[i, 4] <- -constants[i, 4]
}
check <- capture.output(pdf_check(as.numeric(constants[i, 1:4]),
method = method)$valid.pdf)
if (!is.na(check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE")) {
constants$valid[i] <- "TRUE"
} else {
constants$valid[i] <- "FALSE"
}
library(SimMultiCorrData)
?calc_lower_skurt()
calc_lower_skurt("Fleishman",skews=0,Skurt=seq(0.1,1.3,0.1))
calc_lower_skurt("Fleishman",skews=0.24,Skurt=seq(0.1,1.3,0.1))
calc_lower_skurt("Polynomial",skews=0.24,fifths=-1,sixths=11,Skurt=seq(0.1,1.3,0.1))
method = "Polynomial"; skews=0.24;fifths=-1;sixths=11;Skurt=seq(0.1,1,0.1)
Six=NULL;xstart=NULL;cstart=NULL;seed=104;n=50
error1 <- "Lower boundary could not be found.
Try more starting values (increase n)
or a different seed or Six vector.
Also verify standardized cumulant values.\n"
error2 <- "Only invalid pdf constants could be found.
Try more starting values (increase n)
or a different seed or Skurt vector.
Also verify standardized cumulant values.\n"
SixCorr1 <- NULL
SkurtCorr1 <- NULL
poly_skurt <- function(c) {
c <- as.numeric(c)
pskurtosis <- 24 * (2 * c[2]^4 + 96 * c[2]^3 * c[4] + c[1]^3 *
(c[3] + 10 * c[5]) + 30 * c[2]^2 *
(6 * c[3]^2 + 64 * c[4]^2 +
140 * c[3] * c[5] + 945 * c[5]^2) +
c[1]^2 * (2 * c[2]^2 + 18 * c[3]^2 +
36 * c[2] * c[4] +
192 * c[4]^2 +
375 * c[3] * c[5] +
2250 * c[5]^2) +
36 * c[2] * c[4] *
(125 * c[3]^2 + 528 * c[4]^2 +
3360 * c[3] * c[5] +
25725 * c[5]^2) +
3 * c[1] *
(45 * c[3]^3 + 1584 * c[3] * c[4]^2 +
1590 * c[3]^2 * c[5] +
21360 * c[4]^2 * c[5] +
21525 * c[3] * c[5]^2 +
110250 * c[5]^3 +
12 * c[2]^2 * (c[3] + 10 * c[5]) +
8 * c[2] * c[4] *
(32 * c[3] + 375 * c[5])) +
9 * (45 * c[3]^4 + 8704 * c[4]^4 +
2415 * c[3]^3 * c[5] +
932400 * c[4]^2 * c[5]^2 +
3018750 * c[5]^4 +
20 * c[3]^2 *
(178 * c[4]^2 +
2765 * c[5]^2) +
35 * c[3] *
(3104 * c[4]^2 * c[5] +
18075 * c[5]^3)))
return(pskurtosis)
}
if (length(xstart) == 0) {
set.seed(seed)
cstart1 <- runif(n, min = 0, max = 2)
cstart2 <- runif(n, min = -1, max = 1)
cstart3 <- runif(n, min = -1, max = 1)
cstart4 <- runif(n, min = -0.025, max = 0.025)
cstart5 <- runif(n, min = -0.025, max = 0.025)
lstart1 <- runif(n, min = -5, max = 5)
lstart2 <- runif(n, min = -0.025, max = 0.025)
lstart3 <- runif(n, min = -0.025, max = 0.025)
lstart4 <- runif(n, min = -0.025, max = 0.025)
xstart <- cbind(cstart1, cstart2, cstart3, cstart4,
cstart5, lstart1, lstart2, lstart3,
lstart4)
}
test <- numeric(nrow(xstart))
for (i in 1:nrow(xstart)) {
test[i] <-
ifelse(!is.na(poly_skurt_check(xstart[i, ],
a = c(skews, fifths,
sixths))[1]),
TRUE, FALSE)
}
xstart2 <- xstart[which(test == TRUE), ]
constants0 <- NULL
xstart2
converged <- NULL
for (i in 1:nrow(xstart2)) {
nl_solution <- nleqslv(x = xstart2[i, ],
fn = poly_skurt_check,
a = c(skews, fifths, sixths),
method = "Broyden")
if (nl_solution$termcd == 1) {
converged <- rbind(converged, nl_solution$x)
}
}
constants <- converged
constants
is.null(converged)
constants2 <- data.frame()
nrow(constants) != 0
constants <- data.frame(cbind(-constants[, 2] - 3 * constants[, 4],
constants),
rep("FALSE", nrow(constants)))
colnames(constants) <- c("c0", "c1", "c2", "c3", "c4", "c5",
"lambda1", "lambda2", "lambda3",
"lambda4", "valid.pdf")
constants$valid.pdf <- as.character(constants$valid.pdf)
for (i in 1:nrow(constants)) {
if (power_norm_corr(as.numeric(constants[i, 1:6]),
method = method) < 0) {
constants[i, 2] <- -constants[i, 2]
constants[i, 4] <- -constants[i, 4]
constants[i, 6] <- -constants[i, 6]
}
check <- capture.output(pdf_check(as.numeric(constants[i, 1:6]),
method = method)$valid.pdf)
if (!is.na(check[1] == "[1] TRUE" | check[2] == "[1] TRUE" |
check[3] == "[1] TRUE")) {
constants$valid[i] <- "TRUE"
} else {
constants$valid[i] <- "FALSE"
}
}
constants
library(SimMultiCorrData)
?calc_lower_skurt()
calc_lower_skurt("Fleishman",skews=0,Skurt=seq(0.1,1.3,0.05))
calc_lower_skurt("Fleishman",skews=0.24,Skurt=seq(0.1,1.3,0.05))
calc_lower_skurt("Fleishman",skews=0.24,fifths=-1,sixths=11,Skurt=seq(0.1,1.3,0.05))
calc_lower_skurt("Polynomial",skews=0.24,fifths=-1,sixths=11,Skurt=seq(0.1,1.3,0.05))
A=calc_lower_skurt("Polynomial",skews=0.24,fifths=-1,sixths=11,Skurt=seq(0.1,1.3,0.05))
A$Min
pdf_check(A$Min[1,4:9],"Polynomial")
find_constants("Polynomial",skews=0.24,skurts=A$Min[1,15],fifths=-1,sixths=11,seed=104)
check = pdf_check(A$Min[1,4:9],"Polynomial")$valid.pdf
check
check[1] == TRUE
check[1] == FALSE
check = suppressMessages(pdf_check(A$Min[1,4:9],"Polynomial")$valid.pdf)
library(SimMultiCorrData)
pdf_check
?calc_lower_skurt
calc_lower_skurt("Fleishman",skews=0,Skurt=seq(0.01,1.3,0.01))
calc_lower_skurt("Fleishman",skews=0.24,Skurt=seq(0.1,1.3,0.1))
calc_lower_skurt("Polynomial",skews=0.24,fifths=-1,sixths=11,Skurt=seq(0.1,1.3,0.1))
options(scipen = 999)
V1 <- c(0, 0, 28.5)
V2 <- c(0.24, -1, 11)
V3 <- c(0.48, -2, 6.25)
V4 <- c(0.72, -2.5, 2.5)
V5 <- c(0.96, -2.25, -0.25)
V6 <- c(1.20, -1.20, -3.08)
V7 <- c(1.44, 0.40, 6)
V8 <- c(1.68, 2.38, 6)
V9 <- c(1.92, 11, 195)
V10 <- c(2.16, 10, 37)
V11 <- c(2.40, 15, 200)
G <- as.data.frame(rbind(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11))
colnames(G) <- c("g1", "g3", "g4")
# kurtosis correction vector (used in case of invalid power method pdf constants)
Skurt <- seq(0.01, 2, 0.01)
# sixth cumulant correction vector (used in case of no converged solutions for
# method = "Polynomial")
Six <- seq(0.1, 10, 0.1)
# Fleishman's Third-order transformation
F_lower <- list()
for (i in 1:nrow(G)) {
F_lower[[i]] <- calc_lower_skurt("Fleishman", G[i, 1], Skurt = Skurt,
seed = 104, n = 50)
}
F_lower[[11]]
H_lower <- list()
for (i in 1:nrow(G)) {
H_lower[[i]] <- calc_lower_skurt("Polynomial", G[i, 1], G[i, 2], G[i, 3],
Skurt = Skurt, Six = Six, seed = 104,
n = 50)
}
PBON_lower <- G$g1^2 - 2
# Compare results:
# Note: 1) the lower Headrick kurtosis boundary for V4 is slightly lower than the
#          value found by Headrick (-0.480129), and
#       2) the approximate lower kurtosis boundaries used in PoisBinOrdNonNor are
#          much lower than the actual Fleishman boundaries, indicating that the
#          guideline is not accurate.
Lower <- matrix(1, nrow = nrow(G), ncol = 12)
colnames(Lower) <- c("skew", "fifth", "sixth", "H_valid.skurt",
"F_valid.skurt", "H_invalid.skurt", "F_invalid.skurt",
"PBON_skurt", "H_skurt_corr", "F_skurt_corr",
"H_time", "F_time")
for (i in 1:nrow(G)) {
Lower[i, 1:3] <- as.numeric(G[i, 1:3])
Lower[i, 4] <- ifelse(H_lower[[i]]$Min[1, "valid.pdf"] == "TRUE",
H_lower[[i]]$Min[1, "skurtosis"], NA)
Lower[i, 5] <- ifelse(F_lower[[i]]$Min[1, "valid.pdf"] == "TRUE",
F_lower[[i]]$Min[1, "skurtosis"], NA)
Lower[i, 6] <- min(H_lower[[i]]$Invalid.C[, "skurtosis"])
Lower[i, 7] <- min(F_lower[[i]]$Invalid.C[, "skurtosis"])
Lower[i, 8:12] <- c(PBON_lower[i], H_lower[[i]]$SkurtCorr1,
F_lower[[i]]$SkurtCorr1,
H_lower[[i]]$Time, F_lower[[i]]$Time)
}
Lower <- as.data.frame(Lower)
print(Lower[, 1:8], digits = 4)
Lower[, 9:12]
library(stargazer)
?stargazer()
stargazer(Lower[, 1:8],summary=F,header=F,digits=6)
stargazer(Lower[, 1:8],summary=F,header=F)
stargazer(Lower[, 1:8],summary=F,header=F,digits=6)
stargazer(Lower[, 9:12],summary=F,header=F,digits=3)
