?stats
?dlgamma
?dlogis
?dlnorm
?dnbinom
library(ggplot2)
?theme()
?element_text
D <-
data.frame(Dist = c("Benini", "Beta", "Beta-Normal", "Birnbaum-Saunders",
"Chisq", "Dagum", "Exponential", "Exp-Geometric",
"Exp-Logarithmic", "Exp-Poisson", "F", "Fisk",
"Frechet", "Gamma", "Gaussian", "Gompertz", "Gumbel",
"Kumaraswamy", "Laplace", "Lindley", "Logistic",
"Loggamma", "Loglaplace", "Lognormal", "Lomax",
"Makeham", "Maxwell", "Nakagami", "Paralogistic",
"Pareto", "Perks", "Rayleigh", "Rice",
"Singh-Maddala", "Skewnormal", "t", "Topp-Leone",
"Triangular", "Uniform", "Weibull"),
pdf = c("dbenini", "dbeta", "dbetanorm", "dbisa", "dchisq",
"ddagum", "dexp", "dexpgeom", "dexplog", "dexppois",
"df", "dfisk", "dfrechet", "dgamma", "dnorm",
"dgompertz", "dgumbel", "dkumar", "dlaplace",
"dlind", "dlogis", "dlgamma", "dloglap", "dlnorm",
"dlomax", "dmakeham", "dmaxwell", "dnaka",
"dparalogistic", "dpareto", "dperks", "dgenray",
"drice", "dsinmad", "dskewnorm", "dt", "dtopple",
"dtriangle", "dunif", "dweibull"),
fx = c("rbenini", "rbeta", "rbetanorm", "rbisa", "rchisq",
"rdagum", "rexp", "rexpgeom", "rexplog", "rexppois",
"rf", "rfisk", "rfrechet", "rgamma", "rnorm",
"rgompertz", "rgumbel", "rkumar", "rlaplace",
"rlind", "rlogis", "rlgamma", "rloglap", "rlnorm",
"rlomax", "rmakeham", "rmaxwell", "rnaka",
"rparalogistic", "rpareto", "rperks", "rgenray",
"rrice", "rsinmad", "rskewnorm", "rt", "rtopple",
"rtriangle", "runif", "rweibull"),
Lower = as.numeric(c(params[1], 0, -Inf, rep(0, 9),
params[1], 0, -Inf, 0, -Inf, 0, -Inf,
0, -Inf, -Inf, -Inf, rep(0, 6),
params[1], rep(0, 4), -Inf, -Inf, 0,
params[1], params[1], 0)),
Upper = as.numeric(c(Inf, 1, rep(Inf, 15), 1, rep(Inf, 18),
params[2], params[2], Inf)))
params = c(0, 1)
D <-
data.frame(Dist = c("Benini", "Beta", "Beta-Normal", "Birnbaum-Saunders",
"Chisq", "Dagum", "Exponential", "Exp-Geometric",
"Exp-Logarithmic", "Exp-Poisson", "F", "Fisk",
"Frechet", "Gamma", "Gaussian", "Gompertz", "Gumbel",
"Kumaraswamy", "Laplace", "Lindley", "Logistic",
"Loggamma", "Loglaplace", "Lognormal", "Lomax",
"Makeham", "Maxwell", "Nakagami", "Paralogistic",
"Pareto", "Perks", "Rayleigh", "Rice",
"Singh-Maddala", "Skewnormal", "t", "Topp-Leone",
"Triangular", "Uniform", "Weibull"),
pdf = c("dbenini", "dbeta", "dbetanorm", "dbisa", "dchisq",
"ddagum", "dexp", "dexpgeom", "dexplog", "dexppois",
"df", "dfisk", "dfrechet", "dgamma", "dnorm",
"dgompertz", "dgumbel", "dkumar", "dlaplace",
"dlind", "dlogis", "dlgamma", "dloglap", "dlnorm",
"dlomax", "dmakeham", "dmaxwell", "dnaka",
"dparalogistic", "dpareto", "dperks", "dgenray",
"drice", "dsinmad", "dskewnorm", "dt", "dtopple",
"dtriangle", "dunif", "dweibull"),
fx = c("rbenini", "rbeta", "rbetanorm", "rbisa", "rchisq",
"rdagum", "rexp", "rexpgeom", "rexplog", "rexppois",
"rf", "rfisk", "rfrechet", "rgamma", "rnorm",
"rgompertz", "rgumbel", "rkumar", "rlaplace",
"rlind", "rlogis", "rlgamma", "rloglap", "rlnorm",
"rlomax", "rmakeham", "rmaxwell", "rnaka",
"rparalogistic", "rpareto", "rperks", "rgenray",
"rrice", "rsinmad", "rskewnorm", "rt", "rtopple",
"rtriangle", "runif", "rweibull"),
Lower = as.numeric(c(params[1], 0, -Inf, rep(0, 9),
params[1], 0, -Inf, 0, -Inf, 0, -Inf,
0, -Inf, -Inf, -Inf, rep(0, 6),
params[1], rep(0, 4), -Inf, -Inf, 0,
params[1], params[1], 0)),
Upper = as.numeric(c(Inf, 1, rep(Inf, 15), 1, rep(Inf, 18),
params[2], params[2], Inf)))
Dist = c("Benini", "Beta", "Beta-Normal", "Birnbaum-Saunders",
"Chisq", "Dagum", "Exponential", "Exp-Geometric",
"Exp-Logarithmic", "Exp-Poisson", "F", "Fisk",
"Frechet", "Gamma", "Gaussian", "Gompertz", "Gumbel",
"Kumaraswamy", "Laplace", "Lindley", "Logistic",
"Loggamma", "Loglaplace", "Lognormal", "Lomax",
"Makeham", "Maxwell", "Nakagami", "Paralogistic",
"Pareto", "Perks", "Rayleigh", "Rice",
"Singh-Maddala", "Skewnormal", "t", "Topp-Leone",
"Triangular", "Uniform", "Weibull")
pdf = c("dbenini", "dbeta", "dbetanorm", "dbisa", "dchisq",
"ddagum", "dexp", "dexpgeom", "dexplog", "dexppois",
"df", "dfisk", "dfrechet", "dgamma", "dnorm",
"dgompertz", "dgumbel", "dkumar", "dlaplace",
"dlind", "dlogis", "dlgamma", "dloglap", "dlnorm",
"dlomax", "dmakeham", "dmaxwell", "dnaka",
"dparalogistic", "dpareto", "dperks", "dgenray",
"drice", "dsinmad", "dskewnorm", "dt", "dtopple",
"dtriangle", "dunif", "dweibull")
length(Dist)
length(pdf)
fx = c("rbenini", "rbeta", "rbetanorm", "rbisa", "rchisq",
"rdagum", "rexp", "rexpgeom", "rexplog", "rexppois",
"rf", "rfisk", "rfrechet", "rgamma", "rnorm",
"rgompertz", "rgumbel", "rkumar", "rlaplace",
"rlind", "rlogis", "rlgamma", "rloglap", "rlnorm",
"rlomax", "rmakeham", "rmaxwell", "rnaka",
"rparalogistic", "rpareto", "rperks", "rgenray",
"rrice", "rsinmad", "rskewnorm", "rt", "rtopple",
"rtriangle", "runif", "rweibull")
length(fx)
Lower = as.numeric(c(params[1], 0, -Inf, rep(0, 9),
params[1], 0, -Inf, 0, -Inf, 0, -Inf,
0, -Inf, -Inf, -Inf, rep(0, 6),
params[1], rep(0, 4), -Inf, -Inf, 0,
params[1], params[1], 0))
length(Lower)
Upper = as.numeric(c(Inf, 1, rep(Inf, 15), 1, rep(Inf, 18),
params[2], params[2], Inf))
length(Upper)
library(SimMultiCorrData)
library(SimMultiCorrData)
library(VGAM)
?dbenini
calc_theory("Benini", c(1, exp(1)))
?dbetanorm
calc_theory("Beta-Normal", c(0.1, 4, 0, 1))
?dbisa
calc_theory("Birnbaum-Saunders", 2)
calc_theory("Birnbaum-Saunders", c(1, 2))
?ddagum
calc_theory("Dagum", c(1, 1, 2))
?dexpgeom
calc_theory("Exp-Geometric", c(1, 0.5))
?dexplog
calc_theory("Exp-Logarithmic", c(0.5, 2))
calc_theory("Exp-Logarithmic", c(2, 0.5))
?dexppois
calc_theory("Exp-Poisson", c(2, 0.5))
?dfisk
calc_theory("Fisk", c(exp(2), exp(1)))
?dfrechet
calc_theory("Frechet", c(0,1,5))
calc_moments(rfrechet(10000, 0,1,5))
calc_moments(rfisk(10000, exp(2), exp(1)))
?dgompertz
calc_theory("Gompertz", c(1, exp(1)))
?dgumbel
calc_theory("Gumbel", c(1, 2))
?dkumar
calc_theory("Kumaraswamy", c(2, 2))
?dlindley
?dlind
calc_theory("Lindley", exp(-1))
?dlgamma
calc_theory("Loggamma", c(0,1,1))
?dloglap
calc_theory("Loglaplace", c(0,1,0.5))
calc_theory("Loglaplace", c(0, exp(0.5), 0.5, 1))
calc_moments(rloglap(10000, 0, exp(0.5, 0.5, 1)))
calc_moments(rloglap(10000, 0, exp(0.5), 0.5, 1))
?dlnorm()
calc_theory("Lognormal", c(0, 1))
calc_moments(rlnorm(10000, 0, 1))
?dlomax
calc_theory("Lomax", c(1, 2))
?dmakeham
calc_theory("Makeham", c(exp(1), exp(-1)))
?dmaxwell
calc_theory("Maxwell", 3)
?dnaka
calc_theory("Nakagami", c(1,2))
?dparalogistic
calc_theory("Paralogistic", c(exp(1),exp(2)))
?dperks
calc_theory("Perks", c(exp(1),exp(-1)))
?drice
calc_theory("Rice", c(1,0))
?dsinmad
calc_theory("Singh-Maddala", c(exp(2), exp(1), exp(1)))
?dskewnorm
calc_theory("Skewnormal", c(0,1,0))
?dtopple
calc_theory("Topp-Leone", 0.7)
library(SimMultiCorrData)
library(printr)
citation("printr")
library(PoisBinOrdNonNor)
?PoisBinOrdNonNor
lower.upper.cors
library(PoisBinOrd)
?PoisBinOrd
correlation.limits
library(MultiOrd)
?MultiOrd
library(SimMultiCorrData)
system("R CMD Rd2pdf SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
system("R CMD Rd2pdf C:\\Users\\Allison\\Documents\\SimMultiCorrData")
library(SimMultiCorrData)
devtools::build_vignettes()
library(printr)
citation("printr")
citation("stats")
devtools::build_vignettes()
library(SimMultiCorrData)
devtools::check()
Six <- list(seq(0.01,1,0.01), NULL, 1:5)
Six
i=2
if (length(Six) == 0) Six2 <- NULL else
Six2 <- Six[[i]]
Six2
Six <- list()
i=1
length(Six) == 0 | length(Six[[1]]) == 0
library(SimMultiCorrData)
f1 <- "C:\\Users\\Allison\\Desktop\\Dissertation\\M1v2neg\\"
f2 <- paste(f1, "Arrays\\", sep = "")
f1 <- "C:\\Users\\Allison\\Desktop\\Dissertation\\Method1v2\\"
f2 <- "C:\\Users\\Allison\\Desktop\\Dissertation\\M1v2neg\\"
f3 <- paste(f1, "Arrays\\", sep = "")
library("data.table")
library("xtable")
library("Matrix")
library("gridExtra")
f1 <- "C:\\Users\\Allison\\Desktop\\Dissertation\\Method1v2\\"
f2 <- "C:\\Users\\Allison\\Desktop\\Dissertation\\M1v2neg\\"
f3 <- paste(f1, "Arrays\\", sep = "")
options(scipen = 999)
quantile_summary <- function(x_list, q1 = 0.25, q2 = 0.75, digits = 3) {
as.data.frame(rbindlist(lapply(x_list, data.table,
keep.rownames = TRUE))[,
lapply(.SD,
function(x) paste(round(median(x, na.rm = TRUE), digits), " (",
round(quantile(x, probs = q1, na.rm = TRUE), digits), ", ",
round(quantile(x, probs = q2, na.rm = TRUE), digits), ")",
sep = "")), by = rn][, rn := NULL])
}
## Positive correlation
Rey <- matrix(0.4, 10, 10)
diag(Rey) <- 1
Corr1 <- readRDS(paste(f1, "Corr1.rds", sep = ""))
Corr_error1 <- list()
for (i in 1:length(Corr1)) {
Corr_error1[[i]] <- as.data.frame(Corr1[[i]] - Rey)
Corr1[[i]] <- as.data.frame(Corr1[[i]])
rownames(Corr1[[i]]) <- c(1:nrow(Rey))
rownames(Corr_error1[[i]]) <- c(1:nrow(Rey))
}
Corr_error2 <- list()
for (i in 1:20) {
Corr_error2 <- append(Corr_error2, readRDS(paste(f3, "Corr_error2_", i, ".rds", sep = "")))
}
f3 <- paste(f2, "Arrays\\", sep = "")
Corr_error2 <- list()
for (i in 1:20) {
Corr_error2 <- append(Corr_error2, readRDS(paste(f3, "Corr_error2_", i, ".rds", sep = "")))
}
Valid.pdf2 <- list()
SixCorr2 <- list()
for (i in 1:20) {
Valid.pdf2 <- append(Valid.pdf2, readRDS(paste(f3, "Valid.pdf2_", i, ".rds", sep = "")))
SixCorr2 <- append(SixCorr2, readRDS(paste(f3, "SixCorr2_", i, ".rds", sep = "")))
}
valid <- 0
false <- NULL
for (i in 1:length(Valid.pdf2)) {
valid2 <- sum(Valid.pdf2[[i]] == TRUE)
if (valid2 != 2) false <- append(false, i)
valid <- valid + valid2
}
valid
# look at values of sixth cumulant corrections needed to create valid pdf's
# and determine the most frequent sixth cumulant corrections
one <- numeric(rep)
two <- numeric(rep)
for (i in 1:rep) {
one[i] <- Sixcorr2[[i]][1]
two[i] <- Sixcorr2[[i]][2]
}
table(as.factor(one))
table(as.factor(two))
rep <- 10000
one <- numeric(rep)
two <- numeric(rep)
for (i in 1:rep) {
one[i] <- Sixcorr2[[i]][1]
two[i] <- Sixcorr2[[i]][2]
}
table(as.factor(one))
table(as.factor(two))
Dist <- c("Triangular", "Beta")
Params <- list(c(1, 6, 4), c(6, 3))
# Calculate standardized cumulants
Stcum1 <- calc_theory(Dist[1], Params[[1]])
Stcum2 <- calc_theory(Dist[2], Params[[2]])
Stcum <- cbind(Stcum1, Stcum2)
colnames(Stcum) <- Dist
rownames(Stcum) <- c("mean", "sd", "skew", "skurtosis", "fifth", "sixth")
# list of sixth cumulant corrections to correct for invalid power method pdfs
Six <- list(seq(0.52, 0.8, 0.01), seq(0.01, 1.07, 0.01))
find_constants("Polynomial", Stcum[3,1],Stcum[4,1],Stcum[5,1],Stcum[6,1],Six=Six)
find_constants("Polynomial", Stcum[3,1],Stcum[4,1],Stcum[5,1],Stcum[6,1],Six=Six[[1]])
SixCorr2[[1]]
head(one)
one <- numeric(rep)
two <- numeric(rep)
for (i in 1:rep) {
one[i] <- Sixcorr2[[i]][1]
two[i] <- Sixcorr2[[i]][2]
}
Valid.pdf2 <- list()
Sixcorr2 <- list()
for (i in 1:20) {
Valid.pdf2 <- append(Valid.pdf2, readRDS(paste(f3, "Valid.pdf2_", i, ".rds", sep = "")))
Sixcorr2 <- append(Sixcorr2, readRDS(paste(f3, "SixCorr2_", i, ".rds", sep = "")))
}
one <- numeric(rep)
two <- numeric(rep)
for (i in 1:rep) {
one[i] <- Sixcorr2[[i]][1]
two[i] <- Sixcorr2[[i]][2]
}
table(as.factor(one))
table(as.factor(two))
seed <- 1234
# repetitions
rep <- 10000
# sample size
n <- 10000
# Continuous Distributions
Dist <- c("Triangular", "Beta")
Params <- list(c(1, 6, 4), c(6, 3))
# Calculate standardized cumulants
Stcum1 <- calc_theory(Dist[1], Params[[1]])
Stcum2 <- calc_theory(Dist[2], Params[[2]])
Stcum <- cbind(Stcum1, Stcum2)
colnames(Stcum) <- Dist
rownames(Stcum) <- c("mean", "sd", "skew", "skurtosis", "fifth", "sixth")
# list of sixth cumulant corrections to correct for invalid power method pdfs
Six <- list(seq(0.52, 0.8, 0.01), seq(0.01, 1.07, 0.01))
# no ordinal distributions will be simulated
marginal <- NULL
# Poisson Distributions
lam <- c(0.1, 0.3, 10, 20)
# Negative Binomial Distributions
size <- c(2, 5, 50, 25)
prob <- c(0.75, 0.9, 0.7, 0.5)
ncat <- length(marginal)
ncont <- ncol(Stcum)
npois <- length(lam)
nnb <- length(size)
## Positive correlation
Rey <- matrix(0.4, 10, 10)
diag(Rey) <- 1
valid1 <- valid_corr(k_cat = ncat, k_cont = ncont, k_pois = npois,
k_nb = nnb, method = "Polynomial", means = Stcum[1, ],
vars = Stcum[2, ]^2, skews = Stcum[3, ],
skurts = Stcum[4, ], fifths = Stcum[5, ],
sixths = Stcum[6, ], Six = Six, marginal = marginal,
lam = lam, size = size, prob = prob,
rho = Rey, seed = seed)
library(SimMultiCorrData)
warnings()
valid1 <- valid_corr(k_cat = ncat, k_cont = ncont, k_pois = npois,
k_nb = nnb, method = "Polynomial", means = Stcum[1, ],
vars = Stcum[2, ]^2, skews = Stcum[3, ],
skurts = Stcum[4, ], fifths = Stcum[5, ],
sixths = Stcum[6, ], Six = Six, marginal = marginal,
lam = lam, size = size, prob = prob,
rho = Rey, seed = seed)
fifth <- rcorrvar(n = n, k_cont = ncont, k_cat = ncat, k_pois = npois,
k_nb = nnb, method = "Polynomial", means = Stcum[1, ],
vars = Stcum[2, ]^2, skews = Stcum[3, ],
skurts = Stcum[4, ], fifths = Stcum[5, ],
sixths = Stcum[6, ], Six = Six, marginal = marginal,
lam = lam, size = size, prob = prob,
rho = Rey, seed = seed)
seed=104
fifth <- rcorrvar(n = n, k_cont = ncont, k_cat = ncat, k_pois = npois,
k_nb = nnb, method = "Polynomial", means = Stcum[1, ],
vars = Stcum[2, ]^2, skews = Stcum[3, ],
skurts = Stcum[4, ], fifths = Stcum[5, ],
sixths = Stcum[6, ], Six = Six, marginal = marginal,
lam = lam, size = size, prob = prob,
rho = Rey, seed = seed)
Time1 <- readRDS(paste(f1, "Time1.rds", sep = ""))
head(Time1)
summary(Time1)
sum(Time1)
sum(Time1)/60
Skurt_Lower <- readRDS(paste(f2, "Skurt_Lower.rds", sep = ""))
Skurt_Lower
print(Skurt_Lower, digits = 3)
print(Skurt_Lower, digits = 3)
Skurt_Lower <- readRDS(paste(f2, "Skurt_Lower.rds", sep = ""))
print(Skurt_Lower, digits = 3)
Skurt_Lower
NCorr_error1_el <- list()
for (i in 1:20) {
NCorr_error1_el <- append(NCorr_error1_el, readRDS(paste(f3, "Corr_error1_el_", i, ".rds", sep = "")))
}
NCorr_error2_el <- readRDS(paste(f2, "Corr_error2_el.rds", sep = ""))
quantile_summary(NCorr_error1_el)
quantile_summary(NCorr_error2_el)
Ncorr_error1_el <- rbindlist(lapply(NCorr_error1_el, data.table,
keep.rownames = TRUE))[,
lapply(.SD, median, na.rm = TRUE),
by = rn][, rn := NULL]
Ncorr_error2_el <- rbindlist(lapply(NCorr_error2_el, data.table,
keep.rownames = TRUE))[,
lapply(.SD, median, na.rm = TRUE),
by = rn][, rn := NULL]
median_corr_errors <-
rbind(unclass(summary(as.numeric(as.matrix(Ncorr_error1_el)))),
unclass(summary(as.numeric(as.matrix(Ncorr_error2_el)))))
rownames(median_corr_errors) <- c("Method 1", "Method 2")
print(xtable(median_corr_errors,
caption = "Summary of median correlation errors with the error loop.",
label = "table_median_corr_errors", digits = 5))
f4 <- "C:\\Users\\Allison\\Desktop\\Dissertation\\PBON_new\\"
Skurt_Lower <- readRDS(paste(f4, "Skurt_Lower.rds", sep = ""))
Skurt_Lower
library(SimMultiCorrData)
Ncorr_error1 <- readRDS(paste(f2, "Corr_error1.rds", sep = ""))
Ncorr_error2 <- readRDS(paste(f2, "Corr_error2.rds", sep = ""))
Ncorr_error1 <- quantile_summary(NCorr_error1)
rownames(Ncorr_error1) <- c("C1", "C2", "P1", "P2", "P3", "P4",
"NB1", "NB2", "NB3", "NB4")
colnames(Ncorr_error1) <- rownames(Ncorr_error1)
Ncorr_error2 <- quantile_summary(NCorr_error2)
rownames(Ncorr_error2) <- rownames(Ncorr_error1)
colnames(Ncorr_error2) <- rownames(Ncorr_error2)
# display selected correlation errors
print(xtable(Ncorr_error1[c("C1", "C2", "NB1", "NB2", "P1"), c("P1", "P2")],
caption = "Median (IQR) of selected correlation errors using Method 1 with target correlation matrix ReyN.",
label = "table_Ncorr_errors1m1"))
print(xtable(Ncorr_error2[c("C1", "C2", "NB1", "NB2", "P1"), c("P1", "P2")],
caption = "Median (IQR) of selected correlation errors using Method 2 with target correlation matrix ReyN.",
label = "table_Ncorr_errors1m2"))
NCorr_error1 <- readRDS(paste(f2, "Corr_error1.rds", sep = ""))
NCorr_error2 <- readRDS(paste(f2, "Corr_error2.rds", sep = ""))
Ncorr_error1 <- quantile_summary(NCorr_error1)
rownames(Ncorr_error1) <- c("C1", "C2", "P1", "P2", "P3", "P4",
"NB1", "NB2", "NB3", "NB4")
colnames(Ncorr_error1) <- rownames(Ncorr_error1)
Ncorr_error2 <- quantile_summary(NCorr_error2)
rownames(Ncorr_error2) <- rownames(Ncorr_error1)
colnames(Ncorr_error2) <- rownames(Ncorr_error2)
# display selected correlation errors
print(xtable(Ncorr_error1[c("C1", "C2", "NB1", "NB2", "P1"), c("P1", "P2")],
caption = "Median (IQR) of selected correlation errors using Method 1 with target correlation matrix ReyN.",
label = "table_Ncorr_errors1m1"))
print(xtable(Ncorr_error2[c("C1", "C2", "NB1", "NB2", "P1"), c("P1", "P2")],
caption = "Median (IQR) of selected correlation errors using Method 2 with target correlation matrix ReyN.",
label = "table_Ncorr_errors1m2"))
devtools::build_win(version = "R-release")
install.packages("curl")
install.packages("curl")
devtools::build_win(version = "R-release")
install.packages("httr")
print(xtable(Ncorr_error1[c("C1", "C2", "NB1", "NB2", "P1"), c("P1", "P2")],
caption = "Median (IQR) of selected correlation errors using Method 1 with target correlation matrix ReyN.",
label = "table_Ncorr_errors1m1"))
print(xtable(Ncorr_error2[c("C1", "C2", "NB1", "NB2", "P1"), c("P1", "P2")],
caption = "Median (IQR) of selected correlation errors using Method 2 with target correlation matrix ReyN.",
label = "table_Ncorr_errors1m2"))
library("SimMultiCorrData")
library("data.table")
library("xtable")
library("Matrix")
library("gridExtra")
print(xtable(Ncorr_error1[c("C1", "C2", "NB1", "NB2", "P1"), c("P1", "P2")],
caption = "Median (IQR) of selected correlation errors using Method 1 with target correlation matrix ReyN.",
label = "table_Ncorr_errors1m1"))
print(xtable(Ncorr_error2[c("C1", "C2", "NB1", "NB2", "P1"), c("P1", "P2")],
caption = "Median (IQR) of selected correlation errors using Method 2 with target correlation matrix ReyN.",
label = "table_Ncorr_errors1m2"))
Ncorr_error1 <- rbindlist(lapply(NCorr_error1, data.table,
keep.rownames = TRUE))[,
lapply(.SD, median, na.rm = TRUE),
by = rn][, rn := NULL]
Ncorr_error2 <- rbindlist(lapply(NCorr_error2, data.table,
keep.rownames = TRUE))[,
lapply(.SD, median, na.rm = TRUE),
by = rn][, rn := NULL]
median_corr_errors <-
rbind(unclass(summary(as.numeric(as.matrix(Ncorr_error1)))),
unclass(summary(as.numeric(as.matrix(Ncorr_error2)))),
unclass(summary(as.numeric(as.matrix(Ncorr_error1_el)))),
unclass(summary(as.numeric(as.matrix(Ncorr_error2_el)))))
rownames(median_corr_errors) <- c("Method 1", "Method 2", "Error Loop 1", "Error Loop 2")
print(xtable(median_corr_errors,
caption = "Summary of median correlation errors (across all variable pairs) with target correlation matrix ReyN.",
label = "table_median_corr_errors", digits = 5))
install.packages("curl")
install.packages("httr")
install.packages("devtools")
devtools::build_vignettes()
library(SimMultiCorrData)
devtools::build_win(version = "R-devel")
devtools::build_win(version = "R-release")
devtools::build_vignettes()
